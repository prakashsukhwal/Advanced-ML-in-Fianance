{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Activity01_DataPrep","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyMq/7XmZgrBdaQgtf8XwQEe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"iI1RKNugRqsX","executionInfo":{"status":"ok","timestamp":1636944525004,"user_tz":-480,"elapsed":346,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}}},"source":["## turn on the autocomplete (if off by default)\n","%config use_jedi = False"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"sbwa6rDaXfhI"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l5KhKjXY9DnX"},"source":["## Data Prepapration for a simple NN in PyTorch:\n","1. Data Read (interactive)\n","2. Normalize feature set\n","3. Tensor creation for train/test datasets (without dataloader)\n","\n","> Note: Once complete, please shutdown your notebook (Runtime ==> Manage Sessions ==> Terminate)\n"]},{"cell_type":"markdown","metadata":{"id":"np3OGrH2_exf"},"source":["# 1. import necessary libraries-1 "]},{"cell_type":"code","metadata":{"id":"hFfOiv0k9Dvu","executionInfo":{"status":"ok","timestamp":1636944653944,"user_tz":-480,"elapsed":1025,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}}},"source":["import numpy as np # numpy arrays, matrix operations etc.\n","import pandas as pd # read the datafiles\n","import io # for any input/output operations\n","\n","from sklearn.preprocessing import StandardScaler # normalize your features\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"75GZ_vSg_oED"},"source":["# import necessary libraries-2"]},{"cell_type":"code","metadata":{"id":"9rWUtL8B9D3E","executionInfo":{"status":"ok","timestamp":1636944729707,"user_tz":-480,"elapsed":10612,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}}},"source":["import torch # main torch library"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HgJTQOHwF5dg"},"source":["### Read in the iris data using iris.csv"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":171},"id":"-nzkCDh2FQJn","executionInfo":{"status":"ok","timestamp":1635144007805,"user_tz":-480,"elapsed":409,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}},"outputId":"5e588e21-350d-4202-ab5f-0464863a474f"},"source":["df = \n","df.head(4)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal_length  sepal_width  petal_length  petal_width species\n","0           5.1          3.5           1.4          0.2  setosa\n","1           4.9          3.0           1.4          0.2  setosa\n","2           4.7          3.2           1.3          0.2  setosa\n","3           4.6          3.1           1.5          0.2  setosa"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"8RnhvggqGEY-"},"source":["### Separate the dependent and independent variables"]},{"cell_type":"code","metadata":{"id":"wkqRDMKXFQMa"},"source":["# take out the indepdent variables\n","X =  \n","\n","# take out the dependent variable \n","y = "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VIM3XfY-LddQ"},"source":["### convert labels of target to numbers\n"," setosa:0\n"," versicolor: 1\n"," verginica: 2"]},{"cell_type":"code","metadata":{"id":"kFHZrtWAyDaI"},"source":["y_int = []\n","# override the y\n","y_int = [0 if val == 'setosa' else 1 if val == 'versicolor' else 2 for val in y]\n","y = np.array(y_int, dtype = 'float64')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"x7E1fuJKH6dY"},"source":["### Create a train-test 70-30 stratified split\n","> From sklearn documentation: \n","> **stratify** : array-like or None (default=None)<br/>\n","    If not None, data is split in a stratified fashion, using this as\n","the class labels."]},{"cell_type":"code","metadata":{"id":"8luCF_aqFQPB"},"source":["# create a 70-30 split of data\n","X_train, X_test, y_train, y_test = "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZvePoaiWM3Q6","executionInfo":{"status":"ok","timestamp":1635144625876,"user_tz":-480,"elapsed":6,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}},"outputId":"d859f44b-3373-451b-9ce3-0638e2587a7b"},"source":["print(X_train.shape, y_train.shape)\n","print(X_test.shape, y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(105, 4) (105,)\n","(45, 4) (45,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"O2vCpBJwKH77"},"source":["#### verify that the splits have similar proportion of 0 and 1s resulting from stratified sampling "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KcMmkPaTKRuA","executionInfo":{"status":"ok","timestamp":1635144627361,"user_tz":-480,"elapsed":11,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}},"outputId":"ec84ee0e-d5a3-420b-973d-503790a2d8b8"},"source":["# in y_train\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0    0.333333\n","0.0    0.333333\n","2.0    0.333333\n","dtype: float64"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qc5DnQ6gLxPp","executionInfo":{"status":"ok","timestamp":1635144630190,"user_tz":-480,"elapsed":373,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}},"outputId":"f6914e44-eeb5-48cf-ab64-3e1fac3df519"},"source":["# in y_test\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0    0.333333\n","0.0    0.333333\n","2.0    0.333333\n","dtype: float64"]},"metadata":{},"execution_count":44}]},{"cell_type":"markdown","metadata":{"id":"_9dNWlJEGLeA"},"source":["### Use your learning from Day-1/2 to perform feature normalization"]},{"cell_type":"code","metadata":{"id":"FsPslehd9pMO"},"source":["# Perform feature Normalization\n","scale = \n","# X = ss.fit_transform(X)\n","X_train = \n","X_test = "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"HEFaqFenNG-_"},"source":["## Convert the data to pytorch tensors"]},{"cell_type":"code","metadata":{"id":"bmQqsuHWymy4"},"source":["X_train = \n","X_test = \n","y_train = \n","y_test = "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"inUZKhZcN_8C","executionInfo":{"status":"ok","timestamp":1635144704523,"user_tz":-480,"elapsed":421,"user":{"displayName":"Prakaash Sukhwal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghzzt-AFO-3NEhq84ctHbsx-kMXPFGJBKbkyLO4=s64","userId":"00923159090350613901"}},"outputId":"197d9815-e7a9-4f9d-d637-f4e2c7683ec9"},"source":["print(X_train.shape, y_train.shape)\n","print(X_test.shape, y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([105, 4]) torch.Size([105])\n","torch.Size([45, 4]) torch.Size([45])\n"]}]}]}